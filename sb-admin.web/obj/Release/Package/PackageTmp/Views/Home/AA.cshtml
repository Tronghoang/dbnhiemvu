
@{
    ViewBag.Title = "AA";
    Layout = "~/Views/Shared/_admin.cshtml";
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.6/Chart.bundle.min.js"></script>


<h2>AA</h2>
<div class="col-lg-12">
   
    <input type="number" id="TienGiong" placeholder="Tiền Giống"/>
    <input type="number" id="TienCong"  placeholder="Tiền Công"/>
    <input type="number" id="TienPhan" placeholder="Tiền Phân"/>
    <input type="number" id="SoNgay" placeholder="Số Ngày"/>
    <input type="number" id="GiaBan" placeholder="Giá Bán"/>
    <button id="a" onclick="MM()">Tính Toán</button>
    <div class="row">
        <div id="checkBody">
            <canvas id="canvas"></canvas>
        </div>

    </div>
</div>
@section scripts
{
<script>
    var LoiNhuanMacDinh = 300;
    var datas = {
        BanDau: 0,
        GiaTri: 123,
    };
    DataPoint = datas;
    
    function MM() {
        var TienGiong = parseInt($('#TienGiong').val());
        var TienCong = parseInt($('#TienCong').val());
        var TienPhan = parseInt($('#TienPhan').val());
        var SoNgay = parseInt($('#SoNgay').val());
        var GiaBan = parseInt($('#GiaBan').val());
        var LoiNhuan = GiaBan - (TienCong + TienGiong + TienPhan) * SoNgay;
        var BatDau = 0;
        data.datasets[0].data = [
             BatDau,
            LoiNhuan,
        ];
                   config.options.horizontalLine[0].y = LoiNhuanMacDinh;
                   MaxValue = LoiNhuanMacDinh;
                  
                   //if (Math.max.apply(null, datas.GiaTri) > LoiNhuanMacDinh) {
                   //    delete config.options.scales.yAxes[0].ticks.max;
                   //}
                   //else {
                   //    config.options.scales.yAxes[0].ticks.max = LoiNhuanMacDinh;
                   //}

                   //if (Math.min.apply(null, datas.Giatri) < LoiNhuanMacDinh) {
                   //    delete config.options.scales.yAxes[0].ticks.min;
                   //}
                   //else {
                   //    config.options.scales.yAxes[0].ticks.min = LoiNhuanMacDinh;
                   //}

                   //if (datas.CanTren != null) {
                   //    //delete config.options.scales.yAxes[0].ticks.max;
                   //    //config.options.scales.yAxes[0].ticks.max = datas.CanTren;
                   //    config.options.horizontalLine[0].y = LoiNhuanMacDinh;
                      
                   //}
                   //if (datas.CanDuoi != null) {
                   //    //delete config.options.scales.yAxes[0].ticks.min;
                   //    //config.options.scales.yAxes[0].ticks.min = datas.CanDuoi;
                   //    config.options.horizontalLine[1].y = LoiNhuanMacDinh;
                       
                   //}
                   console.log(config.options.horizontalLine);
                   //
                   $('#checkBody').html('<canvas id="canvas"></canvas>');
                   ctx = canvas.getContext("2d");
                   var myChart2 = new Chart(ctx, config);
               }


    var data = {
        labels: ["Ngày Bắt Đầu", "Ngày Kết Thúc"],
        datasets: [{
            label: "Lợi Nhuận Thu Về",
            fill: false,
            lineTension: 0.1,
            backgroundColor: "rgba(75,192,192,0.4)",
            borderColor: "rgba(75,192,192,1)",
            borderCapStyle: 'butt',
            borderDash: [],
            borderDashOffset: 0.0,
            borderJoinStyle: 'miter',
            pointBorderColor: "rgba(75,192,192,1)",
            pointBackgroundColor: "#fff",
            //pointBorderWidth: 1,
            //pointHoverRadius: 5,
            pointHoverBackgroundColor: "rgba(75,192,192,1)",
            pointHoverBorderColor: "rgba(220,220,220,1)",
            //pointHoverBorderWidth: 2,
            //pointRadius: 1,
            //pointHitRadius: 10,
            data: DataPoint,
            spanGaps: false,
            scaleSteps: 4,
            scaleOverride: true,
            scaleStepWidth: 50,
            scaleStartValue: 0
        }]
    };
    var config = {
        type: 'line',
        data: data,
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        //max: MaxValue
                        //stepSize: 0.5

                    }
                }],
            },
            "horizontalLine": [{
                //"y": MaxValue,
                "y": 100,
                "style": "rgba(255, 0, 0, .4)",
                "text": "max",

            }

            , {
                "y": 0,
                //"y": MinValue,
                "text": "min"
            }]
        }
    };
    var horizonalLinePlugin = {
        afterDraw: function (chartInstance) {
            var yScale = chartInstance.scales["y-axis-0"];
            var canvas = chartInstance.chart;
            var ctx = canvas.ctx;
            var index;
            var line;
            var style;

            if (chartInstance.options.horizontalLine) {
                for (index = 0; index < chartInstance.options.horizontalLine.length; index++) {
                    line = chartInstance.options.horizontalLine[index];

                    if (!line.style) {
                        style = "rgba(169,169,169, .6)";
                    } else {
                        style = line.style;
                    }

                    if (line.y) {
                        yValue = yScale.getPixelForValue(line.y);
                    } else {
                        yValue = 0;
                    }

                    ctx.lineWidth = 3;

                    if (yValue) {
                        ctx.beginPath();
                        ctx.moveTo(0, yValue);
                        ctx.lineTo(canvas.width, yValue);
                        ctx.strokeStyle = style;
                        ctx.stroke();
                    }

                    if (line.text) {
                        ctx.fillStyle = style;
                        ctx.fillText(line.text, 0, yValue + ctx.lineWidth);
                    }
                }
                return;
            };
        }
    };
    Chart.pluginService.register(horizonalLinePlugin);
    window.onload = function () {
        ctx = canvas.getContext("2d");
        //var myChart2 = new Chart(ctx, config);
    };
</script>

    }